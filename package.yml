name       : llvm
version    : 7.0.0
release    : 64
source     :
    - https://releases.llvm.org/7.0.0/llvm-7.0.0.src.tar.xz : 8bc1f844e6cbde1b652c19c1edebc1864456fd9c78b8c1bea038e51b363fe222
    - https://releases.llvm.org/7.0.0/cfe-7.0.0.src.tar.xz : 550212711c752697d2f82c648714a7221b1207fd9441543ff4aa9e3be45bba55
    - https://releases.llvm.org/7.0.0/compiler-rt-7.0.0.src.tar.xz : bdec7fe3cf2c85f55656c07dfb0bd93ae46f2b3dd8f33ff3ad6e7586f4c670d6
    - https://releases.llvm.org/7.0.0/lld-7.0.0.src.tar.xz : fbcf47c5e543f4cdac6bb9bbbc6327ff24217cd7eafc5571549ad6d237287f9c
    - https://releases.llvm.org/7.0.0/clang-tools-extra-7.0.0.src.tar.xz : 937c5a8c8c43bc185e4805144744799e524059cac877a44d9063926cd7a19dbe
    - https://releases.llvm.org/7.0.0/libcxx-7.0.0.src.tar.xz : 9b342625ba2f4e65b52764ab2061e116c0337db2179c6bce7f9a0d70c52134f0
    - https://releases.llvm.org/7.0.0/libcxxabi-7.0.0.src.tar.xz : 9b45c759ff397512eae4d938ff82827b1bd7ccba49920777e5b5e460baeb245f
    - https://releases.llvm.org/7.0.0/openmp-7.0.0.src.tar.xz : 30662b632f5556c59ee9215c1309f61de50b3ea8e89dcc28ba9a9494bba238ff
homepage   : http://llvm.org/
license    : NCSA
summary    :
    - Low Level Virtual Machine (Reusable compiler and toolchains)
    - clang : Clang Compiler frontend to LLVM
    - clang-devel : Development files for building clang plugins
    - clang-32bit : 32bit libraries for clang
component  :
    - programming
    - clang : programming
debug      : no
emul32     : yes
libsplit   : no
clang      : yes
builddeps  :
    - pkgconfig32(libelf)
    - pkgconfig32(libffi)
    - pkgconfig32(libxml-2.0)
    - pkgconfig(libedit)
    - doxygen
    - glibc-32bit-devel
    - libgcc-32bit
    - llvm-32bit-devel
    - swig
    - zlib-32bit-devel
rundeps    :
    - clang :
        - llvm-devel
    - clang-devel :
        - llvm-clang
description: |
    The LLVM package contains a collection of modular and reusable compiler and toolchain technologies. The Low Level Virtual Machine (LLVM) Core libraries provide a modern source and target-independent optimizer, along with code generation support for many popular CPUs (as well as some less common ones!). These libraries are built around a well specified code representation known as the LLVM intermediate representation ("LLVM IR").
patterns   :
    - 32bit-devel :
        - /usr/lib32/cmake/llvm
    - clang-devel :
        - /usr/include/clang*
        - /usr/include/lld*
        - /usr/include/openmp*
        - /usr/lib64/libclang*.a
    - clang :
        - /usr/bin
        - /usr/libexec
        - /usr/lib64/clang
        - /usr/lib64/libclang*.so*
        - /usr/share/man/*/*clang*
        - /usr/share/man/*/*scan-build*
        - /usr/share/llvm/cmake
        - /usr/share/clang
        - /usr/share/opt-viewer
        - /usr/share/scan-build
        - /usr/share/scan-view
    - devel :
        - /usr/bin/FileCheck
        - /usr/bin/bugpoint
        - /usr/bin/count
        - /usr/bin/dsymutil
        - /usr/bin/lli*
        - /usr/bin/llc*
        - /usr/bin/llvm*
        - /usr/bin/not
        - /usr/bin/obj2yaml
        - /usr/bin/opt
        - /usr/bin/sancov
        - /usr/bin/sanstats
        - /usr/bin/verify-uselistorder
        - /usr/bin/yaml-bench
        - /usr/bin/yaml2obj
        - /usr/share/llvm/cmake
replaces   :
    - clang : clang
    - clang-devel : clang-devel
environment: |
    # Decontaminate build environment
    unset LDFLAGS
    unset LD_AS_NEEDED

    # Set build flags
    if [[ -z "${EMUL32BUILD}" ]]; then
        export _LLVM_TRIPLE="%HOST%"
        export _LLVM_ARCH="x86_64"
        export _LLVM_FLAGS_FINAL="-march=x86-64 -mtune=generic -gline-tables-only -O3 -fstack-protector -pipe -DNDEBUG"
    else
        export _LLVM_TRIPLE="i686-pc-linux-gnu"
        export _LLVM_ARCH="i686"
        export _LLVM_FLAGS_FINAL="-march=i686 -mtune=generic -gline-tables-only -O3 -fstack-protector -pipe -DNDEBUG"
    fi
setup      : |
    # llvm patches
    %patch -p1 < $pkgfiles/0001-llvm-Let-the-linker-find-the-correct-ffi-as-cmake-br.patch
    %patch -p1 < $pkgfiles/D44391-export-LLVM_DYLIB_COMPONENTS-in-LLVMConfig.cmake.patch

    mkdir -p tools

    # Only want clang tooling for 64bit build
    if [[ -z "${EMUL32BUILD}" ]]; then
        # Set up our tools (cfe)
        tar xf $sources/cfe-${version}.src.tar.xz -C tools
        mv tools/cfe-${version}.src tools/clang

        # Set up compiler-rt
        tar xf $sources/compiler-rt-${version}.src.tar.xz -C projects
        mv projects/compiler-rt-${version}.src projects/compiler-rt

        # Set up clang-tools-extra
        tar xf $sources/clang-tools-extra-${version}*.src.tar.xz -C tools/clang/tools
        mv tools/clang/tools/clang-tools-extra-${version}*.src tools/clang/tools/extra

        # Set up lld
        tar xf $sources/lld-${version}.src.tar.xz -C tools
        mv tools/lld-${version}.src tools/lld

        # Make openmp 64bit only for now
        tar xf $sources/openmp-${version}.src.tar.xz -C projects
        mv projects/openmp-${version}.src projects/openmp

        # Patch cfe for Solus specific options
        pushd tools/clang
            %patch -p1 < $pkgfiles/0001-cfe-Use-correct-Solus-multilib-paths.patch
            %patch -p1 < $pkgfiles/0002-cfe-Use-the-GNU-hash-style-for-Solus-binary-build-id.patch
            %patch -p1 < $pkgfiles/0001-Enable-stack-protector-strong-by-default.patch
        popd

        # Pull lld in line with binutils linkers for consistency
        pushd tools/lld
            %patch -p1 < $pkgfiles/0001-Enable-as-needed-with-LD_AS_NEEDED-variable.patch
            %patch -p1 < $pkgfiles/0002-Make-gnuhash-the-default-when-not-specified.patch
        popd
    fi

    # Now set up all of the projects (libcxx, libcxxabi)
    mkdir -p projects
    for project in libcxx libcxxabi ; do
        tar xf $sources/${project}-${version}.src.tar.xz -C projects
        mv projects/${project}-${version}.src projects/${project}
    done

    # Set up stage2 final flags
    export CFLAGS="$_LLVM_FLAGS_FINAL"
    export CXXFLAGS="$_LLVM_FLAGS_FINAL"

    # Configure
    mkdir solusBuildDir
    pushd solusBuildDir
    cmake -G Ninja .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCLANG_DEFAULT_LINKER="lld" \
        -DCLANG_DEFAULT_OBJCOPY="llvm-objcopy" \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_LIBDIR_SUFFIX=%LIBSUFFIX% \
        -DLLVM_TARGET_ARCH=$_LLVM_ARCH \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_DEFAULT_TARGET_TRIPLE=$_LLVM_TRIPLE \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_ENABLE_RTTI=OFF \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_ENABLE_CXX1Y=ON \
        -DENABLE_LINKER_BUILD_ID=ON \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON
    popd
build      : |
    %ninja_build -v
install    : |
    %ninja_install -v
    mv $installdir/usr/include/llvm/Config/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config-%LIBSUFFIX%.h

    # Only execute for 64bit build
    if [[ -z "${EMUL32BUILD}" ]]; then
        install -d -D -m 00755 $installdir/%libdir%/bfd-plugins
        ln -sv ../LLVMgold.so $installdir/%libdir%/bfd-plugins/.

        # Do NOT include libgomp*, it will conflict with libgomp
        rm $installdir/%libdir%/libgomp.*

        # Finally add our compatibility header
        install -m 00644 $pkgfiles/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config.h
    fi
