name        : llvm
version     : 4.0.1
release     : 51
source      :
    - http://releases.llvm.org/4.0.1/llvm-4.0.1.src.tar.xz : da783db1f82d516791179fe103c71706046561f7972b18f0049242dee6712b51
    - http://releases.llvm.org/4.0.1/cfe-4.0.1.src.tar.xz : 61738a735852c23c3bdbe52d035488cdb2083013f384d67c1ba36fabebd8769b
    - http://releases.llvm.org/4.0.1/compiler-rt-4.0.1.src.tar.xz : a3c87794334887b93b7a766c507244a7cdcce1d48b2e9249fc9a94f2c3beb440
    - http://releases.llvm.org/4.0.1/lldb-4.0.1.src.tar.xz : 8432d2dfd86044a0fc21713e0b5c1d98e1d8aad863cf67562879f47f841ac47b
    - http://releases.llvm.org/4.0.1/clang-tools-extra-4.0.1.src.tar.xz : 35d1e64efc108076acbe7392566a52c35df9ec19778eb9eb12245fc7d8b915b6
    - http://releases.llvm.org/4.0.1/libcxx-4.0.1.src.tar.xz : 520a1171f272c9ff82f324d5d89accadcec9bc9f3c78de11f5575cdb99accc4c
    - http://releases.llvm.org/4.0.1/libcxxabi-4.0.1.src.tar.xz : 8f08178989a06c66cd19e771ff9d8ca526dd4a23d1382d63e416c04ea9fa1b33
homepage    : http://llvm.org/
license     :
    - NCSA
summary     :
    - Low Level Virtual Machine (Reusable compiler and toolchains)
    - clang: Clang Compiler frontend to LLVM
    - clang-devel: Development files for building clang plugins
    - clang-32bit: 32bit libraries for clang
component   :
    - programming
    - clang: programming
debug       : false
libsplit    : false
builddeps   :
    - pkgconfig32(libffi)
    - pkgconfig32(libxml-2.0)
    - pkgconfig(libedit)
    - glibc-32bit-devel
    - libgcc-32bit
    - libstdc++-32bit
    - doxygen
    - swig
rundeps    :
    - clang:
        - llvm-devel
    - clang-devel:
        - llvm-clang
    - clang-32bit-devel:
        - llvm-clang-32bit
        - llvm-clang-devel
description : |
    The LLVM package contains a collection of modular and reusable compiler and toolchain technologies. The Low Level Virtual Machine (LLVM) Core libraries provide a modern source and target-independent optimizer, along with code generation support for many popular CPUs (as well as some less common ones!). These libraries are built around a well specified code representation known as the LLVM intermediate representation ("LLVM IR").
patterns   :
    - clang-devel:
        - /usr/include/clang*
        - /usr/include/lldb*
        - /usr/lib64/libclang*.a
        - /usr/lib64/liblldb*.a
    - clang-32bit:
        - /usr/lib32/liblldb*.so*
        - /usr/lib32/libclang*.so*
    - clang-32bit-devel:
        - /usr/lib32/libclang*.a
        - /usr/lib32/liblldb*.a
        - /usr/lib32/clang
        - /usr/lib32/cmake/
    - clang:
        - /usr/bin
        - /usr/libexec
        - /usr/lib64/clang
        - /usr/lib64/liblldb*.so*
        - /usr/lib64/libclang*.so*
        - /usr/share/man/*/*clang*
        - /usr/share/man/*/*scan-build*
        - /usr/share/llvm/cmake
        - /usr/share/clang
        - /usr/share/scan-build
        - /usr/share/scan-view
    - devel:
        - /usr/bin/bugpoint
        - /usr/bin/lli*
        - /usr/bin/llc*
        - /usr/bin/llv*
        - /usr/bin/macho-dump
        - /usr/bin/opt
replaces   :
    - clang : clang
    - clang-devel : clang-devel
setup      : |
    # llvm patches
    %patch -p1 < $pkgfiles/0001-llvm-Let-the-linker-find-the-correct-ffi-as-cmake-br.patch

    mkdir DISABLED_AREA
    mkdir -p tools
    # Set up our tools (cfe)
    tar xf $sources/cfe-${version}.src.tar.xz -C tools
    mv tools/cfe-${version}.src tools/clang

    # Set up lldb (in future add lld and override LD
    for tool in lldb ; do
        tar xf $sources/${tool}-${version}.src.tar.xz -C tools
        mv tools/${tool}-${version}.src tools/${tool}
    done

    # patch lldb with libstdc++ from gcc7
    pushd tools/lldb
    %patch -p1 < $pkgfiles/lldb-libstdcxx7.patch
    %patch -p1 < $pkgfiles/lldb-libedit.patch
    popd

    # Set up clang-tools-extra
    tar xf $sources/clang-tools-extra-${version}.src.tar.xz -C tools/clang/tools
    mv tools/clang/tools/clang-tools-extra-${version}.src tools/clang/tools/extra

    # Now set up all of the projects (compiler-rt, libcxx, libcxxabi, FUTURE: openmp)
    mkdir -p projects
    for project in compiler-rt libcxx libcxxabi ; do
        tar xf $sources/${project}-${version}.src.tar.xz -C projects
        mv projects/${project}-${version}.src projects/${project}
    done

    # Patch cfe for Solus specific options
    pushd tools/clang
    %patch -p1 < $pkgfiles/0001-cfe-Use-correct-Solus-multilib-paths.patch
    %patch -p1 < $pkgfiles/0002-cfe-Use-the-GNU-hash-style-for-Solus-binary-build-id.patch
    %patch -p1 < $pkgfiles/0003-cfe-Link-properly-to-multilib-xml2-library.patch
    popd

    # Override compilers for this first run
    export CC=gcc
    export CXX=g++

    # Configure
    mkdir sol-stage1
    mkdir sol-stage2

    export _LLVM_TRIPLE="%HOST%"
    export _LLVM_ARCH="x86_64"
    export _LLVM_FLAGS_BOOTSTRAP="-march=x86-64 -mtune=generic -O3 -fstack-protector -pipe"
    export _LLVM_FLAGS_FINAL="-march=x86-64 -mtune=generic -gline-tables-only -O3 -fstack-protector -pipe -DNDEBUG"

    # Decontaminate environment for stage1 compilation
    export CFLAGS="$_LLVM_FLAGS_BOOTSTRAP"
    export CXXFLAGS="$_LLVM_FLAGS_BOOTSTRAP"
    unset LDFLAGS
    unset LD_AS_NEEDED

    # Before we start, disable lldb/lld
    mv tools/lldb DISABLED_AREA/lldb
    mv projects/libcxx DISABLED_AREA/libcxx
    mv projects/libcxxabi DISABLED_AREA/libcxxabi

    # Start stage1 bootstrap
    pushd sol-stage1
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
        -DLLVM_TARGET_ARCH=$_LLVM_ARCH \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_DEFAULT_TARGET_TRIPLE=$_LLVM_TRIPLE \
        -DLLVM_ENABLE_RTTI=OFF \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
        -DLLVM_ENABLE_CXX1Y=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON
    %make V=1 VERBOSE=1
    popd

    # Use our stage1 compiler
    STAGE1DIR=$(realpath ./sol-stage1/bin)
    # We need to preserve the symlink in the name during invocation
    export CC="${STAGE1DIR}/clang"
    export CXX="${STAGE1DIR}/clang++"

    # Set up stage2 final flags
    export CFLAGS="$_LLVM_FLAGS_FINAL"
    export CXXFLAGS="$_LLVM_FLAGS_FINAL"

    # For stage2 2, re-enable them
    mv DISABLED_AREA/lldb tools/.
    mv DISABLED_AREA/libcxx projects/.
    mv DISABLED_AREA/libcxxabi projects/.

    # Stage2 compile now
    pushd sol-stage2
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_LIBDIR_SUFFIX=%LIBSUFFIX% \
        -DLLVM_TARGET_ARCH=$_LLVM_ARCH \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_DEFAULT_TARGET_TRIPLE=$_LLVM_TRIPLE \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_ENABLE_RTTI=OFF \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_ENABLE_CXX1Y=ON \
        -DLLDB_DISABLE_PYTHON=ON \
        -DENABLE_LINKER_BUILD_ID=ON \
        -DLLVM_INCLUDEDIR=/usr/include \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON
build      : |
    # Build it
    unset LD_AS_NEEDED
    %make -C sol-stage2 V=1 VERBOSE=1

    # Now build 32-bit llvm bits
    mkdir sol-stage2-emul32
    export _LLVM_TRIPLE="i686-pc-linux-gnu"
    export _LLVM_ARCH="i686"
    export _LLVM_FLAGS_FINAL="-march=i686 -mtune=generic -gline-tables-only -O3 -fstack-protector -pipe -DNDEBUG"

    # Before we start emul32, disable lldb/lld
    mv tools/lldb DISABLED_AREA/lldb

    STAGE2DIR=$(realpath ./sol-stage2/bin)
    pushd sol-stage2-emul32
    # We need to preserve the symlink in the name during invocation
    export CC="${STAGE2DIR}/clang -m32"
    export CXX="${STAGE2DIR}/clang++ -m32"

    export CFLAGS="$_LLVM_FLAGS_FINAL"
    export CXXFLAGS="$_LLVM_FLAGS_FINAL"
    unset LDFLAGS
    unset LD_AS_NEEDED

    # Even though we want to disable stuff, the libLLVM-$VERSION.so won't be installed..
    cmake .. \
        -DLLVM_BUILD_DOCS=OFF \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DLLVM_LIBDIR_SUFFIX=32 \
        -DLLVM_TARGET_ARCH=$_LLVM_ARCH \
        -DLLVM_DEFAULT_TARGET_TRIPLE=$_LLVM_TRIPLE \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_RTTI=OFF \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_ENABLE_CXX1Y=ON \
        -DENABLE_LINKER_BUILD_ID=ON \
        -DLLVM_INCLUDEDIR=/usr/include \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON
    %make V=1 VERBOSE=1
install    : |
    # Install 32-bit
    %make_install -C sol-stage2-emul32 V=1 VERBOSE=1
    mv $installdir/usr/include/llvm/Config/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config-32.h

    # Restore directories for stage2 emul32
    mv DISABLED_AREA/lldb tools/.

    # Allow stage2 native to overwrite any stage2-emul32 files
    %make_install -C sol-stage2 V=1 VERBOSE=1
    mv $installdir/usr/include/llvm/Config/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config-64.h

    # Finally add our compatibility header
    install -m 00644 $pkgfiles/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config.h
